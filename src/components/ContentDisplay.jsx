import { useState } from 'react';  
import TrafficScene from './TrafficLight/TrafficScene';  
import CodeExplanation from './CodeExplanation/CodeExplanation';  
import ConditionalExplanation from './CodeExplanation/ConditionalExplanation';  
import LogicalScene from './LogicalOperators/LogicalScene';  
import LogicalExplanation from './LogicalOperators/LogicalExplanation';  
import OperatorStructure from './LogicalOperators/OperatorStructure';  
import '../styles/ContentDisplay.css';


const ContentDisplay = ({ currentLanguage, selectedTopic }) => {  
  const [currentLight, setCurrentLight] = useState('green');  
  
  if (!selectedTopic) {  
    return (  
      <div className="welcome-message">  
        <h2>游녦 춰Bienvenido!</h2>  
        <p>Selecciona un tema para empezar a aprender</p>  
      </div>  
    );  
  }  
  
  const content = {  
    javascript: {  
      conditionals: (  
        <div className="topic-content">  
          <h2 className="topic-title">Condicionales en JavaScript</h2>  
            
          <div className="concept-explanation">  
            <p>Los condicionales son como sem치foros en el c칩digo. Nos permiten tomar decisiones basadas en condiciones.</p>  
              
            <p>En este ejemplo, veremos c칩mo funciona un sem치foro:</p>  
              
            <ul>  
              <li>Si el sem치foro est치 en <span className="text-green">verde</span>, los autos pueden avanzar 游뚱</li>  
              <li>Si el sem치foro est치 en <span className="text-red">rojo</span>, los autos deben detenerse 游댮</li>  
            </ul>  
              
            <p>Haz clic en las luces del sem치foro para cambiar su estado y ver qu칠 sucede.</p>  
          </div>  
  
          <div className="traffic-container">  
            <TrafficScene   
              currentLight={currentLight}   
              onLightChange={setCurrentLight}   
            />  
          </div>  
  
          {currentLight === 'green' ? (  
            <div className="status-message success">  
              춰Sem치foro en verde! Los autos pueden avanzar 游뚱  
            </div>  
          ) : (  
            <div className="status-message warning">  
              춰Sem치foro en rojo! Los autos deben detenerse 游댮  
            </div>  
          )}  
  
          <div className="explanations-container">  
            <CodeExplanation currentLight={currentLight} />  
            <ConditionalExplanation />  
          </div>  
        </div>  
      ),
      operators: (  
        <div className="topic-content">  
          <h2 className="topic-title">Operadores L칩gicos en JavaScript</h2>  
            
          <div className="concept-explanation">  
            <p>Los operadores l칩gicos nos permiten combinar y evaluar m칰ltiples condiciones.</p>  
              
            <p>Veamos algunos ejemplos pr치cticos:</p>  
              
            <ul>  
              <li>El operador AND (&&) - Como una linterna que necesita bater칤a Y estar encendida 游댡</li>  
              <li>El operador OR (||) - Como pagar en una tienda con diferentes m칠todos de pago 游낅</li>  
              <li>El operador NOT (!) - Como un interruptor que cambia entre encendido y apagado 游눠</li>  
              <li>Combinaci칩n AND y OR - Como la entrada a un club nocturno 游꿧</li>  
            </ul>  
              
            <p>Selecciona cada ejemplo para ver c칩mo funcionan los operadores l칩gicos en situaciones reales.</p>  
          </div>  
  
            <LogicalScene />  
  
          <div className="explanations-container">  
            <LogicalExplanation />  
            <OperatorStructure />  
          </div>  
        </div>  
      ),
      loops: (
        <div className="topic-content">
          <h2 className="topic-title">Bucles en JavaScript</h2>
          <div className="explanation">
            <p className="explanation-text">
              Los bucles nos permiten repetir acciones m칰ltiples veces.
            </p>
          </div>
          {/* Aqu칤 ir치 el contenido de bucles */}
        </div>
      ),
      functions: (
        <div className="topic-content">
          <h2 className="topic-title">Funciones en JavaScript</h2>
          <div className="explanation">
            <p className="explanation-text">
              Las funciones son bloques de c칩digo reutilizables.
            </p>
          </div>
          {/* Aqu칤 ir치 el contenido de funciones */}
        </div>
      ),
      arrays: (
        <div className="topic-content">
          <h2 className="topic-title">Arrays en JavaScript</h2>
          <div className="explanation">
            <p className="explanation-text">
              Los arrays son estructuras que nos permiten almacenar m칰ltiples valores.
            </p>
          </div>
          {/* Aqu칤 ir치 el contenido de arrays */}
        </div>
      ),
      objects: (
        <div className="topic-content">
          <h2 className="topic-title">Objetos en JavaScript</h2>
          <div className="explanation">
            <p className="explanation-text">
              Los objetos nos permiten agrupar datos relacionados.
            </p>
          </div>
          {/* Aqu칤 ir치 el contenido de objetos */}
        </div>
      )
    },
    react: {
      components: (
        <div className="topic-content">
          <h2 className="topic-title">Componentes en React</h2>
          <div className="explanation">
            <p className="explanation-text">
              Los componentes son los bloques de construcci칩n de una aplicaci칩n React.
            </p>
          </div>
          {/* Aqu칤 ir치 el contenido de componentes */}
        </div>
      ),
      props: (
        <div className="topic-content">
          <h2 className="topic-title">Props en React</h2>
          <div className="explanation">
            <p className="explanation-text">
              Las props son la forma de pasar datos entre componentes.
            </p>
          </div>
          {/* Aqu칤 ir치 el contenido de props */}
        </div>
      ),
      state: (
        <div className="topic-content">
          <h2 className="topic-title">Estado en React</h2>
          <div className="explanation">
            <p className="explanation-text">
              El estado nos permite manejar datos din치micos en nuestros componentes.
            </p>
          </div>
          {/* Aqu칤 ir치 el contenido de estado */}
        </div>
      ),
      hooks: (
        <div className="topic-content">
          <h2 className="topic-title">Hooks en React</h2>
          <div className="explanation">
            <p className="explanation-text">
              Los Hooks nos permiten usar estado y otras caracter칤sticas de React en componentes funcionales.
            </p>
          </div>
          {/* Aqu칤 ir치 el contenido de hooks */}
        </div>
      ),
      routing: (
        <div className="topic-content">
          <h2 className="topic-title">Enrutamiento en React</h2>
          <div className="explanation">
            <p className="explanation-text">
              El enrutamiento nos permite navegar entre diferentes vistas en nuestra aplicaci칩n.
            </p>
          </div>
          {/* Aqu칤 ir치 el contenido de enrutamiento */}
        </div>
      )
    }
  };

  // Verificamos si existe el contenido para el lenguaje y tema seleccionados
  const selectedContent = content[currentLanguage]?.[selectedTopic];
  
  if (!selectedContent) {
    return (
      <div className="error-message">
        <h2>游뱂 Contenido no encontrado</h2>
        <p>Lo sentimos, el contenido para este tema a칰n no est치 disponible.</p>
      </div>
    );
  }

  return content[currentLanguage]?.[selectedTopic] || null;
};

export default ContentDisplay;